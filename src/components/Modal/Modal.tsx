import * as S from './ModalStyled'
import {FC} from "react";
import {Overlay} from "./Overlay";
import {ModalContent} from "./ModalContent";
import {ModalBurgerButton} from "./ModalBurgerButton";

export interface ModalProps {
  clickFunc: Function
  typeModal: 'banking' | 'active-thinking'
}

const Modal: FC<ModalProps> = ({clickFunc, typeModal}) => {
  function setTypeContent() {
    switch (typeModal) {
      case "banking":
        return {
          title: 'Онлайн-курс «Банковское дело»',
          lists: [
            {
              title: 'Работа банка',
              listItems: ['Структура и функциональное назначение банка', 'Схема взаимодействия ЦО', 'Схема взаимодействия Регсеть']
            },
            {
              title: 'Прибыль банка',
              listItems: ['Продукты для физических лиц', 'Продукты для бизнеса', 'Кредитные продукты для бизнеса', 'Инвестиционные, страховые и другие продукты']
            },
            {
              title: 'Клиенты банка',
              listItems: ['Работа с клиентами банка', 'Отраслевой подход в привлечении клиентов']
            },
            {
              title: 'Развитие банка',
              listItems: ['Виды офисов и их различия', 'Развитие филиальной сети']
            },
            {
              title: 'Карьера в банке',
              listItems: ['Карьера в банке']
            },
          ]
        }
      case "active-thinking":
        return {
          title: 'Профтест  «Активное мышление»',
          lists: [
            {
              title: 'Зачем тебе нужен этот тест?',
              listItems: ['Тест позволит тебе определить твои самые сильные и слабые стороны и выбрать наиболее эффективное направление для дальнейшего развития.', 'На основании этого тесты мы предложим подходящие именно тебе стажировки и программы для развития.']
            },
            {
              title: 'Что оценивает тест?',
              listItems: ['Тест оценивает мышление и особенности личности, а затем моделирует поведение человека в разных ситуациях и взаимодействиях.', 'Мышление — это способность рассуждать, то есть обрабатывать информацию и делать выводы. От мышления зависят коммуникация, особенности решения задач и стиль работы.', 'Особенности личности — это устойчивые черты психотипа, такие как целеустремленность и перфекционизм.']
            },
            {
              title: 'Как он это оценивает ?',
              listItems: ['Специально обученный искусственный интеллект анализирует логику, лексику, семантику, грамматику свободных ответов человека, а также особенности ввода и микромоторику мыши или касания сенсора.', 'В основу методологии оценки мышления легли работы Выготского, Бейтсона, Розенштока-Хюсси, Дюрана, Пиаже, Шлейермахера, Барта, Эйлера и других. Особенности личности мы определяем по классификации Нэнси Мак-Вильямс, эта классификация применяется в классическом психоанализе']
            },
            {
              title: 'Почему в тесте такие странные вопросы?',
              listItems: ['Был создан проективный тест — то есть человек не может определить взаимосвязь между вопросом, ответом и результатом. Это защищает систему от социально желаемых ответов и позволяет получить чистые реакции для анализа. Все проективные тесты глубоко экспертны, то есть качество интерпретации зависит от уровня эксперта. Эта задача была решена с помощью обучения системы на больших данных, к разметке которых были привлечены разные эксперты.']
            },
            {
              title: 'Результаты теста актуальны навсегда?',
              listItems: ['Нет, и это тоже важное отличие от личностных опросников и тестов способностей. Мышление подобно мышцам: чтобы оно было в тонусе, нужно постоянно его тренировать.']
            },
          ]
        }
    }
  }

  function setReactNode(listItems: string[]) {
    switch (typeModal) {
      case "banking":
        return (
          <S.List>
            {listItems.map((item, index) =>
              <li key={index}>{item}</li>
            )}
          </S.List>
        )
      case "active-thinking":
        return (
          listItems.map((item, index) =>
            <S.Paragraph key={index}>{item}</S.Paragraph>
          )
        )
    }
  }

  return (
    <>
      <Overlay clickFunc={clickFunc}>
        <ModalContent>
          <>
            <S.Header>
              <S.Title>{setTypeContent().title}</S.Title>
              <ModalBurgerButton toggle={true} setToggle={clickFunc}/>
            </S.Header>
            {setTypeContent().lists.map((listItem, index) =>
              <S.ContentBox key={index}>
                <S.Heading>{listItem.title}</S.Heading>
                {setReactNode(listItem.listItems)}
              </S.ContentBox>
            )}
          </>
        </ModalContent>
      </Overlay>
    </>
  );
};

export {Modal};
